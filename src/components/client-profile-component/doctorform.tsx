"use client"
import {Dialog, DialogContent, DialogTitle, DialogTrigger} from "@/components/ui/dialog";
import {Button} from "@/components/ui/button";
import React, {useEffect, useState} from "react";
import {z} from "zod";
import {zodResolver} from "@hookform/resolvers/zod";
import {useForm} from "react-hook-form";
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage,
} from "./form"
import {Input} from "@/components/ui/input";
import InputMask from "react-input-mask";
import {toast} from "react-toastify";
import {Calendar} from "@/components/client-profile-component/calendar";
import {checkMe} from "@/app/action";
import {SafeUser} from "@/types/safeuser.type";


interface DoctorFormProps {
    metod: string;
}

export default function DoctorForm({metod}: DoctorFormProps) {
    const [isOpen, setIsOpen] = useState(false);
    const [user, setUser] = useState<SafeUser>()

    const checkAuth = async () => {
        try {
            const data = await checkMe();
            if (data.success && data.user) {
                setUser(data.user);

            } else {
                alert("<UNK>");
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤—Ö–æ–¥:', error);
            throw error;
        }
    }
    useEffect(() => {
        checkAuth();
    }, []);
    const authorId = user?.id


    const formSchema = z.object({
        date: z.date().min(
            new Date(new Date().setDate(new Date().getDate() + 1)),
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω—å—à–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è"
        ),
        name: z.string().nonempty("–í–≤–µ–¥–∏—Ç–µ –∏–º—è"),
        number: z
            .string()
            .nonempty("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    });

    const form = useForm<z.infer<typeof formSchema>>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            date: undefined,
            name: "",
            number: "+7",
        },
    });

    async function onSubmit(values: z.infer<typeof formSchema>) {
        if (!authorId) {
            toast.error("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å.");
            return;
        }

        try {
            const response = await fetch("/api/consul", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    ...values,
                    authorId,
                    metodForForm: metod // üî• –î–æ–±–∞–≤–ª—è–µ–º metodForForm
                }),
            });

            if (response.ok) {
                toast.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");
                form.reset();
                setIsOpen(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            } else {
                toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (error) {
            toast.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }


    // @ts-ignore
    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>
                <Button className="text-xl font-semibold">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</Button>
            </DialogTrigger>
            <DialogContent className="no-close">
                <DialogTitle>–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏</DialogTitle>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8 flex flex-col">
                        <FormField
                            control={form.control}
                            name="date"
                            render={({field}) => (
                                <FormItem className="flex flex-col">
                                    <FormLabel>–î–∞—Ç–∞</FormLabel>
                                    <FormControl>
                                        <Calendar
                                            mode="single"
                                            selected={field.value}
                                            onSelect={(date) => {
                                                if (date) {
                                                    field.onChange(date);
                                                }
                                            }}
                                            disabled={(date) => date < new Date(new Date().setDate(new Date().getDate() + 1))}
                                            className="calendar-dropdown"
                                        />
                                    </FormControl>
                                    <FormMessage/>
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="name"
                            render={({field}) => (
                                <FormItem>
                                    <FormLabel>–ò–º—è</FormLabel>
                                    <FormControl>
                                        <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è" {...field} />
                                    </FormControl>
                                    <FormMessage/>
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="number"
                            render={({field}) => (
                                <FormItem>
                                    <FormLabel>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</FormLabel>
                                    <FormControl>
                                        <Input
                                            placeholder="+7 (___) ___-__-__"
                                            {...field}

                                        />
                                    </FormControl>
                                    <FormMessage/>
                                </FormItem>
                            )}
                        />
                        <Button type="submit" disabled={form.formState.isSubmitting}>
                            {form.formState.isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
                        </Button>
                    </form>
                </Form>
            </DialogContent>

        </Dialog>
    );
}
